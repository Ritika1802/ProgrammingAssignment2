#For this assignment, we assume that the matrix supplied is always invertible


makeCacheMatrix<-function(x=matrix()){    #creates a special "matrix" object that can cache its inverse
      inv<-NULL
      set<-function(y){                   #sets the value of the function
          x<<-y
          inv<<-NULL
      }
      get<-function(x)                    #gets the value of the function
      setinverse<-function(inverse) inv<<-inverse #sets the value of the inverse
      getinverse<-function() inv          #gets the value of the inverse
      list(set = set, get = get,
           setinverse = setinverse,
           getinverse = getinverse)
}



cacheSolve<- function(x,...){     #computes the inverse of the special "matrix"
        inv<-x$getinverse()       #function gets the inverse from cache if it is calculated
        if(!is.null(inv)){
                message("getting cached data")
                return(inv)
        }
        data<-x$get()
        inv<-solve(data,...)    #if inverse is not calculated, it computes the inverse 
        x$setinverse(inv)       #sets the inverse
        inv
}

